<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>r | Fausto Lopez</title>
    <link>/tag/r/</link>
      <atom:link href="/tag/r/index.xml" rel="self" type="application/rss+xml" />
    <description>r</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 13 Dec 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>r</title>
      <link>/tag/r/</link>
    </image>
    
    <item>
      <title>Accessing Clickhouse Data in R &amp; Python</title>
      <link>/post/accessing-clickhouse-data-in-r-python/</link>
      <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
      <guid>/post/accessing-clickhouse-data-in-r-python/</guid>
      <description>


&lt;div id=&#34;why-use-python-or-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why use Python or R?&lt;/h2&gt;
&lt;p&gt;I think a lot of people wonder why we would use R or python when there are behemoths like Spark and Clickhouse able to crunch data quickly, but the reality is that these database languages weren’t necesarrily set up to do a lot of the more specific data munging work that R and python can do. A lot of data sceintists know that database languages and scripting lanuageges compliment each other.&lt;/p&gt;
&lt;p&gt;In some of my previous posts I set up a clickhouse database under the wsl system in windows, a bit of a tricky setup but for the purpose of testing locally as well as a potential prototype for the company. In thise post I’m going to focus on accessing the data via R and Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r-access&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Access&lt;/h2&gt;
&lt;p&gt;The leading package for clickhouse access in R at the moment is RClickHouse, which comes with dplyr integration for those who enjoy piping. I’m more of a datatable guy, but I appreciate flexibiity. You’ll want to install the package and connect to the database; if you followed my previous post, it will be at the localhost address:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#install.packages(&amp;#39;RClickhouse&amp;#39;)
library(RClickhouse)
library(DBI)
library(dplyr)
con = dbConnect(RClickhouse::clickhouse()
                      , host=&amp;quot;localhost&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you’re connected you can begin querying. We will start off with some basic sql:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dbGetQuery(con, &amp;quot;SELECT cab_type, count(*)
FROM trips
           GROUP BY cab_type&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in evalq((function (..., call. = TRUE, immediate. = FALSE,
## noBreaks. = FALSE, : column count() converted from UInt64 to Numeric&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   cab_type   count()
## 1   yellow 759083667
## 2    green  69145084&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’re a fan of dplyr you can pull that way as well:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trips = 
tbl(con, &amp;quot;trips&amp;quot;) %&amp;gt;% 
  group_by(cab_type) %&amp;gt;%
  summarise(trips=sum(tip_amount, na.rm = T))
trips&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # Source:   lazy query [?? x 2]
## # Database: clickhouse 19.1.6 [default@localhost:9000/default; uptime: 0
## #   days ]
##   cab_type       trips
##   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 yellow   1242908568.
## 2 green      80399851.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And when you’re done with the code you can disconnect from the database:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Close the connection
dbDisconnect(con)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;python-access&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Python Access&lt;/h2&gt;
&lt;p&gt;Python access is very straightforward. You’ll want to reference the &lt;a href=&#34;https://pypi.org/project/clickhouse-driver/&#34;&gt;documentation&lt;/a&gt;. Simply install the driver, I use anaconda for most of my python operations so easily pulled up the terminal and ran the pip install. Next you’ll want to run the following code to enter clickhouse through python and see existing tables:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;from clickhouse_driver import Client
client = Client(&amp;#39;localhost&amp;#39;)
client.execute(&amp;#39;SHOW TABLES&amp;#39;)
client.execute(&amp;#39;SELECT sum(rain) FROM trips&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my case I have mutiple tables; you can also see I went ahead and executed a sql query:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/access_clickhouse_r_py/conda_python_clickhouse.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;This is a great way to access large data with cutting edge database technology throough your favorite scripting language on a windows machines still running the open source software you love. I see it as a good opportunity for teams working within a windows enviornment but needing access to linux software. In one of my next posts I’ll build a quick shiny gui to access the data through a custom front end.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Downloading &amp; Extracting Video Frames in R &amp; Python</title>
      <link>/post/downloading-extracting-video-frames-in-r-python/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      <guid>/post/downloading-extracting-video-frames-in-r-python/</guid>
      <description>


&lt;div id=&#34;video-analytics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Video Analytics&lt;/h2&gt;
&lt;p&gt;I had a recent project proposal in which I was to do something very interesting with data and rather than download some data set to work with I thought it be fun to work on something new. For some time I have been interested in getting into computer vision and now that I build and fly drones merging the two just seems inevitable. So I spent the last weekend learning how to work with this, most of it in python and then a little bit of it in R for fun. The ultimate goal: to run object detection on drones.&lt;/p&gt;
&lt;p&gt;Another note: a lot of this work as usual comes from learning from great people who help the community. Credits to Harrison at &lt;a href=&#34;https://pythonprogramming.net/&#34; class=&#34;uri&#34;&gt;https://pythonprogramming.net/&lt;/a&gt; who hosts an entire youtube tutorial series on opencv not to mention teaches everything for Python. I recommend starting off with this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Z78zbnLlPUA&amp;amp;list=PLQVvvaa0QuDdttJXlLtAJxJetJcqmqlQq&#34; class=&#34;uri&#34;&gt;https://www.youtube.com/watch?v=Z78zbnLlPUA&amp;amp;list=PLQVvvaa0QuDdttJXlLtAJxJetJcqmqlQq&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;computer-vision-in-r-what-why&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Computer Vision in R? What? Why?&lt;/h2&gt;
&lt;p&gt;R is my bread and butter, and I love the language; for those who aren’t as familiar with python this could be a gentle transition into the computer vision world (albeit there is still so much to learn!) and so why not?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-do-i-need&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What do I need?&lt;/h2&gt;
&lt;p&gt;So before we jump into the code let’s go over the dependencies we will need because there are quite a few. A note of caution, setups differ and I am by no means an expert in installation procedures but I will give you my setup:&lt;/p&gt;
&lt;p&gt;****Running Windows 10 Surface&lt;/p&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;p&gt;-for python, you’ll have to decide which version to install, 2.7 o3 3.xx, some people will tell you to install Anaconda. Personally I have all three, but for windows video (one link is Harrison’s run of the install):&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.python.org/downloads/release/python-352/&#34; class=&#34;uri&#34;&gt;https://www.python.org/downloads/release/python-352/&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ulJdZn0qBCQ&#34; class=&#34;uri&#34;&gt;https://www.youtube.com/watch?v=ulJdZn0qBCQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenCV&lt;/p&gt;
&lt;p&gt;-if you follow the youtube video above it should be installed with python 3.5.2&lt;/p&gt;
&lt;p&gt;R&lt;/p&gt;
&lt;p&gt;R is a little easier, install the most recent R version (google it). Install devtools and rtools (just google it, very simple) and then install the ROpenCVlite and Rvision:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/swarm-lab/ROpenCVLite&#34; class=&#34;uri&#34;&gt;https://github.com/swarm-lab/ROpenCVLite&lt;/a&gt; &lt;a href=&#34;https://github.com/swarm-lab/Rvision&#34; class=&#34;uri&#34;&gt;https://github.com/swarm-lab/Rvision&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ROpenCVLite is just going to reinstall OpenCV in the right location for Rvision and future R computer vision libraries to access.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;can-we-start-writing-some-code&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Can we start writing some Code?&lt;/h1&gt;
&lt;p&gt;Now on to the fun stuff. We can start with R; first lets pull the video file we need (drone video from a detection data set I’m working with):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#directory
                                                                                        setwd(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py&amp;quot;)
                                                                                        
#the name of the file
my_path =paste0(getwd(),&amp;quot;/&amp;quot;,&amp;quot;Video_1.avi&amp;quot;)
#download the video
download.file(url = &amp;quot;https://drive.switch.ch/index.php/s/3b3bdbd6f8fb61e05d8b0560667ea992/download?path=%2Fvideos%2Fdrones&amp;amp;files=Video_1.avi&amp;quot;
,destfile = my_path
,mode = &amp;quot;wb&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you’ve downloaded the video into a directory we can begin to parse through it; we can check the number of frames in the video and then extract one to plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Rvision)
#rvision wants us to create a video object
the_vid = Rvision::video(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py/Video_1.avi&amp;quot;)
nframes(the_vid)#shows us the number of frames&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 393&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_frame = readFrame(the_vid,3)
plot(my_frame)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-02-downloading-extracting-video-frames-in-r-python_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;release(the_vid) #i believe like closing an odbc connection this is good practice&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Video released successfully.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the video in place and know how to extract one frame we can simply loop through the frames and save them as images to train our models:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(pbapply)
                                                                                        
#rvision wants us to create a video object
the_vid = video(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py/Video_1.avi&amp;quot;)
                                                                                        
#then we loop through that video object and extract the frame
pblapply(1:10, function(x){
z = readFrame(the_vid,x)
                                                                                          setwd(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py&amp;quot;)
write.Image(z,paste0(x,&amp;quot;_&amp;quot;,&amp;quot;frame&amp;quot;,&amp;quot;.jpg&amp;quot;))
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## NULL
## 
## [[2]]
## NULL
## 
## [[3]]
## NULL
## 
## [[4]]
## NULL
## 
## [[5]]
## NULL
## 
## [[6]]
## NULL
## 
## [[7]]
## NULL
## 
## [[8]]
## NULL
## 
## [[9]]
## NULL
## 
## [[10]]
## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#for the newbies who perfer the for loops syntax:
                                                                                        
# for (i in 1:10) {
#   the_vid = video(&amp;quot;C:\\Users\\fausto\\Documents\\incubator_img_recog\\plane_classifier\\drone_proj\\videos\\drones\\Video_1.avi&amp;quot;)
#   z = readFrame(the_vid,i)
#   plot(z)
# }
                                                                                        
                                                                                        setwd(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py&amp;quot;)
list.files() &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;1_frame.jpg&amp;quot;         &amp;quot;10_frame.jpg&amp;quot;        &amp;quot;2_frame.jpg&amp;quot;        
##  [4] &amp;quot;3_frame.jpg&amp;quot;         &amp;quot;4_frame.jpg&amp;quot;         &amp;quot;5_frame.jpg&amp;quot;        
##  [7] &amp;quot;6_frame.jpg&amp;quot;         &amp;quot;7_frame.jpg&amp;quot;         &amp;quot;8_frame.jpg&amp;quot;        
## [10] &amp;quot;9_frame.jpg&amp;quot;         &amp;quot;vid_frames_r_py.Rmd&amp;quot; &amp;quot;Video_1.avi&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s about it for downloading video data in R. Insert grayscaling functions into the loop, or other analyses with the EBI or imageR package.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;how-about-python&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How about Python?&lt;/h1&gt;
&lt;p&gt;Since we already have the video downloaded in R I won’t bring it in again python. Instead I will run through how to pull the frames and save them. You can run the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;import cv2
import numpy as np
import os
#set directory
os.chdir(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py&amp;quot;)
#pull in video
cap = cv2.VideoCapture(&amp;quot;Video_1.avi&amp;quot;)
count = 0
#success =T
#loop through video and pull frames for saving
while True:
    
    ret, img = cap.read()
    print &amp;#39;Read a new frame: &amp;#39;, ret
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    os.chdir(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py&amp;quot;)
    cv2.imwrite(&amp;quot;frame%d.jpg&amp;quot; % count, img)     # save frame as JPEG file
    count += 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code will kick and error at the end as it runs out of frames, you can adjust to get rid of that. And there it is! A few lines of code and you can already extract frames from videos. In one of my next posts I’ll go over how to use some of that picture data to train a basic Haarcascade so we can detect specific objects in videos.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Extracting Images from the Internet with R</title>
      <link>/post/extracting-images-from-the-internet-with-r/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      <guid>/post/extracting-images-from-the-internet-with-r/</guid>
      <description>


&lt;div id=&#34;why-build-an-image-database&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why build an image database?&lt;/h2&gt;
&lt;p&gt;In a previous post I went over how to pull in video data and parse out frames for processing. That’s really useful for pulling in the data you ultimately want to screen, but at times there is also a need for having other images. You may want to classify certain objects as they appear in other videos, or build Haarcascades with specific images. Regardless you’ll need to access images. I’m going to showcase how to do this in R with imagenet.&lt;/p&gt;
&lt;p&gt;Imagenet is a very popular image database and you can search for virtually anything. In this case I’m going to pull from the image database to construct a database from a few key word links. Ultimately, with this scenario you will easily be able to adopt the code to whatever links you want to pull.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;define-your-database&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Define your database&lt;/h2&gt;
&lt;p&gt;Lately my focus is on building object detection for drones so in my mind I figure I will need pictures of skies, different types of drones, planes and anything else a drone might run into at higher altitudes. I went ahead and searched key word:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-02-extracting-images-from-the-internet-with-r_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;click downloads:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-02-extracting-images-from-the-internet-with-r_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;you’ll want to copy the url addresses:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-02-extracting-images-from-the-internet-with-r_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;build-the-program&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Build the program&lt;/h2&gt;
&lt;p&gt;Repeat this process for all the keywords you are interested in. Note some pictures may overlap in categories, this is something you will probably want to filter out later when you build out a funciton for searching duplicates. Below we start out with a loop that iterates trhough each link:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#loop that iterates through each link
library(pbapply)
urls = c(#sports = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n00523513&amp;quot;,
         bird = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n01517966&amp;quot;,
          drones = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n03245889&amp;quot;
         ,bird = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n01517966&amp;quot;
        ,people = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n07942152&amp;quot;
        ,planes = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n02690373&amp;quot;
        ,sky = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n09436708&amp;quot;)
pblapply(1:length(urls),function(x){
  print(urls[x])
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                                                       bird 
## &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n01517966&amp;quot; 
##                                                                     drones 
## &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n03245889&amp;quot; 
##                                                                       bird 
## &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n01517966&amp;quot; 
##                                                                     people 
## &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n07942152&amp;quot; 
##                                                                     planes 
## &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n02690373&amp;quot; 
##                                                                        sky 
## &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n09436708&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
##                                                                       bird 
## &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n01517966&amp;quot; 
## 
## [[2]]
##                                                                     drones 
## &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n03245889&amp;quot; 
## 
## [[3]]
##                                                                       bird 
## &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n01517966&amp;quot; 
## 
## [[4]]
##                                                                     people 
## &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n07942152&amp;quot; 
## 
## [[5]]
##                                                                     planes 
## &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n02690373&amp;quot; 
## 
## [[6]]
##                                                                        sky 
## &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n09436708&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we loop through the urls one at a time it could take a while. In my work I often parallelize code in order to be more efficient so it’s applied here using the parallel package in R. The general write up looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cl = makeCluster(detectCores()-1) #this function detects yours cores 
clusterExport(cl,c(&amp;quot;libs&amp;quot;,&amp;quot;urls&amp;quot;)) #you will want to export the functions and objects to each core
clusterEvalQ(cl,lapply(libs,require,character.only = T)) #you will want to pass your libraries as well
pblapply(1:length(urls),function(x){
  print(urls[x])
},cl = cl)
stopCluster(cl)
rm(gcl)
gc()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can choose to omit the parellizing if you wish, as you can see, it’s quite simple to remove or add on. Regardless now that we are successfully looping through the links we can nest another loop inside that will run through each of the links and extract the pictures. It then labels the picture by sequence and saves it into a directory. Note the trycatch function is used to pass through the errors and keep going:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#to download negative people and sky images from imagenet
#author: fausto
#libraries
libs = c(&amp;#39;data.table&amp;#39;, &amp;#39;lubridate&amp;#39;, &amp;#39;fasttime&amp;#39;
         , &amp;#39;pbapply&amp;#39;, &amp;#39;dplyr&amp;#39;, &amp;#39;parallel&amp;#39;,&amp;#39;fst&amp;#39;
         ,&amp;#39;RCurl&amp;#39;)
lapply(libs, require, character.only = T)
urls = c(#sports = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n00523513&amp;quot;,
         bird = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n01517966&amp;quot;,
          drones = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n03245889&amp;quot;
         ,bird = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n01517966&amp;quot;
        ,people = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n07942152&amp;quot;
        ,planes = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n02690373&amp;quot;
        ,sky = &amp;quot;http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n09436708&amp;quot;)
#functional loop for entire data set pull----------------------------------
#lets speed up the process with parallelizing it
#stopCluster(cl)
cl = makeCluster(detectCores()-3)
clusterExport(cl,c(&amp;quot;libs&amp;quot;,&amp;quot;urls&amp;quot;))
clusterEvalQ(cl,lapply(libs,require,character.only = T))
pblapply(1:length(urls[1])
         ,function(x){
  
  #print the directory            
  print(paste0(getwd(),&amp;quot;/&amp;quot;,names(urls)[x]))
           
  #create a directory for it
  dir.create(paste0(getwd(),&amp;quot;/&amp;quot;,names(urls)[x]))
           
  #set that directory
  new_direc = paste0(getwd(),&amp;quot;/&amp;quot;,names(urls)[x])
  setwd(new_direc)
  print(new_direc)
  
  #pull the lines from the site
  foto = readLines(urls[x])
  
    pblapply(1:length(foto), function(g){
               
      #(g)
      
      #loop will continue no matter what
      tryCatch({              
        
        #download the data
        download.file(
          foto[g]
          ,destfile = paste0(new_direc
                             ,&amp;quot;/&amp;quot;,g,&amp;quot;.jpg&amp;quot;)
          ,mode = &amp;quot;wb&amp;quot;)
        }, error=function(i){
                 
                 print(&amp;quot;error keep going&amp;quot;)
                 
                 })
      
      
    })
 
 #reset direc
 setwd(&amp;quot;my output directory&amp;quot;)  
  
},cl = cl
)
stopCluster(cl)
rm(cl)
gc()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now check you directory for the jpgs to make sure it has the files:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;setwd(&amp;quot;my output directory&amp;quot;)
length(list.files(pattern = &amp;quot;.jpg&amp;quot;))

## [1] 1053&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And read a file in to see what it looks like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(EBImage)
setwd(direc)
plot(
  readImage(
    list.files(pattern = &amp;quot;.png&amp;quot;)[4]
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-02-extracting-images-from-the-internet-with-r_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And that’s it, you now have an image database at your disposal with seperate directories which you can manipulate to your heart’s desire. In a later post I’ll cover how to clean the bad images and have everything tidy.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Making an R package to Call NHTSA API</title>
      <link>/post/making-an-r-package-to-call-nhtsa-api/</link>
      <pubDate>Sat, 14 Oct 2017 00:00:00 +0000</pubDate>
      <guid>/post/making-an-r-package-to-call-nhtsa-api/</guid>
      <description>


&lt;div id=&#34;why-use-the-nhtsa-api&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why use the NHTSA API?&lt;/h2&gt;
&lt;p&gt;Recently my team has had to work with matching vehicle information to taxi data, specifically make and model information we didn’t have. It reminded me of a while back, mid 2016 during the beginnings of our driver income study when we needed vin information to calculate msrp and look at fuel consumption. At the time I had not been able to locate a package in R to call NHTSA (National Highway Transportation Authority). They have a slim but useful &lt;a href=&#34;https://vpic.nhtsa.dot.gov/api/&#34;&gt;api&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hadn’t built a package before then, so I thought it would be a good chance to collect some interesting data and learn how to make a package. I reference Hilary Park’s &lt;a href=&#34;https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/&#34;&gt;blog&lt;/a&gt; at the time and created my first R package which I called caRshop. It’s nothing more than a basic wrapper but it ended up being very useful for our study as well as our enforcement unit which used the information to validate their inspection data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;By now there are some powerful vin decoding packages out there but if you wish to give caRshop a chance you can install it from the &lt;a href=&#34;https://github.com/datafaust/caRshop&#34;&gt;repo&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;#39;datafaust/caRshop&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once it’s installed you can leverage functions to extract data for a vin. For instance you can pull for basic vin information with our favorite fast and furious character:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(caRshop)
vin_diesel(&amp;quot;1G2HX54K724118697&amp;quot;, sec = 1, tidyup = T)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVinValues/1G2HX54K724118697?format=json&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## No encoding supplied: defaulting to UTF-8.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Count                       Message            SearchCriteria
## 1   131 Results returned successfully VIN(s): 1G2HX54K724118697
##   Results.ABS Results.ActiveSafetySysNote Results.AdaptiveCruiseControl
## 1                                                                      
##   Results.AdaptiveDrivingBeam Results.AdaptiveHeadlights
## 1                                                       
##   Results.AdditionalErrorText Results.AirBagLocCurtain
## 1                                                     
##         Results.AirBagLocFront Results.AirBagLocKnee
## 1 1st Row (Driver &amp;amp; Passenger)                      
##   Results.AirBagLocSeatCushion        Results.AirBagLocSide
## 1                              1st Row (Driver &amp;amp; Passenger)
##   Results.Artemis Results.AutoReverseSystem
## 1                                          
##   Results.AutomaticPedestrianAlertingSound Results.AxleConfiguration
## 1                                                                   
##   Results.Axles Results.BasePrice Results.BatteryA Results.BatteryA_to
## 1                                                                     
##   Results.BatteryCells Results.BatteryInfo Results.BatteryKWh
## 1                                                            
##   Results.BatteryKWh_to Results.BatteryModules Results.BatteryPacks
## 1                                                                  
##   Results.BatteryType Results.BatteryV Results.BatteryV_to
## 1                                                         
##   Results.BedLengthIN Results.BedType Results.BlindSpotMon
## 1                                                         
##   Results.BodyCabType Results.BodyClass Results.BrakeSystemDesc
## 1                          Sedan/Saloon                        
##   Results.BrakeSystemType Results.BusFloorConfigType Results.BusLength
## 1                                                                     
##   Results.BusType Results.CAFEBodyType Results.CAFEMake Results.CAFEModel
## 1                                                                        
##   Results.CAN_AACN Results.CIB Results.CashForClunkers
## 1                                                     
##   Results.ChargerLevel Results.ChargerPowerKW Results.CoolingType
## 1                                                                
##   Results.Country Results.CurbWeightLB Results.CustomMotorcycleType
## 1                                                                  
##   Results.DaytimeRunningLight Results.DestinationMarket
## 1                                                      
##   Results.DisplacementCC Results.DisplacementCI Results.DisplacementL
## 1                 3800.0        231.89022755998                   3.8
##   Results.Doors Results.DriveType Results.DriverAssist
## 1             4                                       
##   Results.DynamicBrakeSupport Results.EDR Results.ESC Results.EVDriveUnit
## 1                                                                        
##   Results.ElectrificationLevel Results.EngineConfiguration
## 1                                                 V-Shaped
##   Results.EngineCycles Results.EngineCylinders Results.EngineHP
## 1                                            6                 
##   Results.EngineHP_to Results.EngineKW Results.EngineManufacturer
## 1                                                     GMPTG Flint
##   Results.EngineModel Results.EntertainmentSystem Results.EquipmentType
## 1                 L36                                                  
##                                              Results.ErrorCode
## 1 0 - VIN decoded clean. Check Digit (9th position) is correct
##   Results.ForwardCollisionWarning       Results.FuelInjectionType
## 1                                 Sequential Fuel Injection (SFI)
##   Results.FuelTypePrimary Results.FuelTypeSecondary Results.GVWR
## 1                                                               
##   Results.KeylessIgnition Results.LaneDepartureWarning
## 1                                                     
##   Results.LaneKeepSystem Results.LowerBeamHeadlampLightSource Results.Make
## 1                                                                  PONTIAC
##   Results.Manufacturer Results.ManufacturerId Results.ManufacturerType
## 1   GENERAL MOTORS LLC                    984                         
##   Results.Model Results.ModelYear Results.MotorcycleChassisType
## 1    Bonneville              2002                              
##   Results.MotorcycleSuspensionType Results.NCAPBodyType Results.NCAPMake
## 1                                                                       
##   Results.NCAPModel Results.NCICCode Results.NCSABodyType Results.NCSAMake
## 1                                                                         
##   Results.NCSAModel
## 1                  
##                                                 Results.Note
## 1 Body Type: Sedan, 4-6 Window, Notchback (GM codes: 19, 69)
##   Results.OtherBusInfo               Results.OtherEngineInfo
## 1                      Name Plate: Chevrolet, Pontiac, Buick
##   Results.OtherMotorcycleInfo Results.OtherRestraintSystemInfo
## 1                                                             
##   Results.OtherTrailerInfo Results.ParkAssist
## 1                                            
##   Results.PedestrianAutomaticEmergencyBraking Results.PlantCity
## 1                                                         Orion
##   Results.PlantCompanyName Results.PlantCountry Results.PlantState
## 1               NA-GM Corp  United States (USA)           Michigan
##   Results.PossibleValues Results.Pretensioner
## 1                                            
##   Results.RearCrossTrafficAlert Results.RearVisibilitySystem
## 1                                                           
##   Results.SAEAutomationLevel Results.SAEAutomationLevel_to
## 1                                                         
##   Results.SeatBeltsAll Results.SeatRows Results.Seats
## 1               Manual                               
##   Results.SemiautomaticHeadlampBeamSwitching Results.Series
## 1                                                        SE
##   Results.Series2 Results.SteeringLocation Results.SuggestedVIN
## 1                                                              
##   Results.TPMS Results.TopSpeedMPH Results.TrackWidth
## 1                                                    
##   Results.TractionControl Results.TrailerBodyType Results.TrailerLength
## 1                                                                      
##   Results.TrailerType Results.TransmissionSpeeds Results.TransmissionStyle
## 1                                                                         
##   Results.Trim Results.Trim2 Results.Turbo       Results.VIN
## 1                                          1G2HX54K724118697
##   Results.ValveTrainDesign Results.VehicleType Results.WheelBaseLong
## 1     Overhead Valve (OHV)       PASSENGER CAR                      
##   Results.WheelBaseShort Results.WheelBaseType Results.WheelSizeFront
## 1                                                                    
##   Results.WheelSizeRear Results.Wheels Results.Windows
## 1                                                    4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll see that this prints out the entire record response fromt the json, with a few parameters to go ahead and convert the response to a dataframe as well as not overload the api with too many calls too quickly.&lt;/p&gt;
&lt;p&gt;In our case we needed to loop over thousands of vehicles. As an example of what a loop for that might look like here we run a few (I’m a huge fan of the pbapply package):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(pbapply)
library(dplyr)
library(data.table)
my_cars = c(&amp;#39;1G2HX54K724118697&amp;#39;, &amp;#39;5UXZV4C58D0E07160&amp;#39;, &amp;#39;1NXBR18E1XZ184142&amp;#39;)

#run loop
my_data = 
my_cars %&amp;gt;% pblapply(function(x){
  vin_diesel(x, sec = 1, tidyup = T)
}) %&amp;gt;% rbindlist()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVinValues/1G2HX54K724118697?format=json&amp;quot;
## [1] &amp;quot;https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVinValues/5UXZV4C58D0E07160?format=json&amp;quot;
## [1] &amp;quot;https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVinValues/1NXBR18E1XZ184142?format=json&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(my_data[,.(Results.Make, Results.Model)])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Results.Make Results.Model
## 1:      PONTIAC    Bonneville
## 2:          BMW            X5
## 3:       TOYOTA       Corolla&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I went ahead and pulled only a few columns, but you get the idea. Running in Python is pretty straightforward, but I’ll go over that another time. This was a fun experience and a great lookback to a time when I was still learning some of the more basic functions in R.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
