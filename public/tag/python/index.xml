<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python | Fausto Lopez</title>
    <link>/tag/python/</link>
      <atom:link href="/tag/python/index.xml" rel="self" type="application/rss+xml" />
    <description>python</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 13 Dec 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>python</title>
      <link>/tag/python/</link>
    </image>
    
    <item>
      <title>Accessing Clickhouse Data in R &amp; Python</title>
      <link>/post/accessing-clickhouse-data-in-r-python/</link>
      <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
      <guid>/post/accessing-clickhouse-data-in-r-python/</guid>
      <description>


&lt;div id=&#34;why-use-python-or-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why use Python or R?&lt;/h2&gt;
&lt;p&gt;I think a lot of people wonder why we would use R or python when there are behemoths like Spark and Clickhouse able to crunch data quickly, but the reality is that these database languages weren’t necesarrily set up to do a lot of the more specific data munging work that R and python can do. A lot of data sceintists know that database languages and scripting lanuageges compliment each other.&lt;/p&gt;
&lt;p&gt;In some of my previous posts I set up a clickhouse database under the wsl system in windows, a bit of a tricky setup but for the purpose of testing locally as well as a potential prototype for the company. In thise post I’m going to focus on accessing the data via R and Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r-access&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Access&lt;/h2&gt;
&lt;p&gt;The leading package for clickhouse access in R at the moment is RClickHouse, which comes with dplyr integration for those who enjoy piping. I’m more of a datatable guy, but I appreciate flexibiity. You’ll want to install the package and connect to the database; if you followed my previous post, it will be at the localhost address:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#install.packages(&amp;#39;RClickhouse&amp;#39;)
library(RClickhouse)
library(DBI)
library(dplyr)
con = dbConnect(RClickhouse::clickhouse()
                      , host=&amp;quot;localhost&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you’re connected you can begin querying. We will start off with some basic sql:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dbGetQuery(con, &amp;quot;SELECT cab_type, count(*)
FROM trips
           GROUP BY cab_type&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in evalq((function (..., call. = TRUE, immediate. = FALSE,
## noBreaks. = FALSE, : column count() converted from UInt64 to Numeric&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   cab_type   count()
## 1   yellow 759083667
## 2    green  69145084&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’re a fan of dplyr you can pull that way as well:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trips = 
tbl(con, &amp;quot;trips&amp;quot;) %&amp;gt;% 
  group_by(cab_type) %&amp;gt;%
  summarise(trips=sum(tip_amount, na.rm = T))
trips&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # Source:   lazy query [?? x 2]
## # Database: clickhouse 19.1.6 [default@localhost:9000/default; uptime: 0
## #   days ]
##   cab_type       trips
##   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
## 1 yellow   1242908568.
## 2 green      80399851.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And when you’re done with the code you can disconnect from the database:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Close the connection
dbDisconnect(con)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;python-access&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Python Access&lt;/h2&gt;
&lt;p&gt;Python access is very straightforward. You’ll want to reference the &lt;a href=&#34;https://pypi.org/project/clickhouse-driver/&#34;&gt;documentation&lt;/a&gt;. Simply install the driver, I use anaconda for most of my python operations so easily pulled up the terminal and ran the pip install. Next you’ll want to run the following code to enter clickhouse through python and see existing tables:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;from clickhouse_driver import Client
client = Client(&amp;#39;localhost&amp;#39;)
client.execute(&amp;#39;SHOW TABLES&amp;#39;)
client.execute(&amp;#39;SELECT sum(rain) FROM trips&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my case I have mutiple tables; you can also see I went ahead and executed a sql query:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/access_clickhouse_r_py/conda_python_clickhouse.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;This is a great way to access large data with cutting edge database technology throough your favorite scripting language on a windows machines still running the open source software you love. I see it as a good opportunity for teams working within a windows enviornment but needing access to linux software. In one of my next posts I’ll build a quick shiny gui to access the data through a custom front end.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Downloading &amp; Extracting Video Frames in R &amp; Python</title>
      <link>/post/downloading-extracting-video-frames-in-r-python/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0000</pubDate>
      <guid>/post/downloading-extracting-video-frames-in-r-python/</guid>
      <description>


&lt;div id=&#34;video-analytics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Video Analytics&lt;/h2&gt;
&lt;p&gt;I had a recent project proposal in which I was to do something very interesting with data and rather than download some data set to work with I thought it be fun to work on something new. For some time I have been interested in getting into computer vision and now that I build and fly drones merging the two just seems inevitable. So I spent the last weekend learning how to work with this, most of it in python and then a little bit of it in R for fun. The ultimate goal: to run object detection on drones.&lt;/p&gt;
&lt;p&gt;Another note: a lot of this work as usual comes from learning from great people who help the community. Credits to Harrison at &lt;a href=&#34;https://pythonprogramming.net/&#34; class=&#34;uri&#34;&gt;https://pythonprogramming.net/&lt;/a&gt; who hosts an entire youtube tutorial series on opencv not to mention teaches everything for Python. I recommend starting off with this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Z78zbnLlPUA&amp;amp;list=PLQVvvaa0QuDdttJXlLtAJxJetJcqmqlQq&#34; class=&#34;uri&#34;&gt;https://www.youtube.com/watch?v=Z78zbnLlPUA&amp;amp;list=PLQVvvaa0QuDdttJXlLtAJxJetJcqmqlQq&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;computer-vision-in-r-what-why&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Computer Vision in R? What? Why?&lt;/h2&gt;
&lt;p&gt;R is my bread and butter, and I love the language; for those who aren’t as familiar with python this could be a gentle transition into the computer vision world (albeit there is still so much to learn!) and so why not?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-do-i-need&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What do I need?&lt;/h2&gt;
&lt;p&gt;So before we jump into the code let’s go over the dependencies we will need because there are quite a few. A note of caution, setups differ and I am by no means an expert in installation procedures but I will give you my setup:&lt;/p&gt;
&lt;p&gt;****Running Windows 10 Surface&lt;/p&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;p&gt;-for python, you’ll have to decide which version to install, 2.7 o3 3.xx, some people will tell you to install Anaconda. Personally I have all three, but for windows video (one link is Harrison’s run of the install):&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.python.org/downloads/release/python-352/&#34; class=&#34;uri&#34;&gt;https://www.python.org/downloads/release/python-352/&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ulJdZn0qBCQ&#34; class=&#34;uri&#34;&gt;https://www.youtube.com/watch?v=ulJdZn0qBCQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenCV&lt;/p&gt;
&lt;p&gt;-if you follow the youtube video above it should be installed with python 3.5.2&lt;/p&gt;
&lt;p&gt;R&lt;/p&gt;
&lt;p&gt;R is a little easier, install the most recent R version (google it). Install devtools and rtools (just google it, very simple) and then install the ROpenCVlite and Rvision:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/swarm-lab/ROpenCVLite&#34; class=&#34;uri&#34;&gt;https://github.com/swarm-lab/ROpenCVLite&lt;/a&gt; &lt;a href=&#34;https://github.com/swarm-lab/Rvision&#34; class=&#34;uri&#34;&gt;https://github.com/swarm-lab/Rvision&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ROpenCVLite is just going to reinstall OpenCV in the right location for Rvision and future R computer vision libraries to access.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;can-we-start-writing-some-code&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Can we start writing some Code?&lt;/h1&gt;
&lt;p&gt;Now on to the fun stuff. We can start with R; first lets pull the video file we need (drone video from a detection data set I’m working with):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#directory
                                                                                        setwd(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py&amp;quot;)
                                                                                        
#the name of the file
my_path =paste0(getwd(),&amp;quot;/&amp;quot;,&amp;quot;Video_1.avi&amp;quot;)
#download the video
download.file(url = &amp;quot;https://drive.switch.ch/index.php/s/3b3bdbd6f8fb61e05d8b0560667ea992/download?path=%2Fvideos%2Fdrones&amp;amp;files=Video_1.avi&amp;quot;
,destfile = my_path
,mode = &amp;quot;wb&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you’ve downloaded the video into a directory we can begin to parse through it; we can check the number of frames in the video and then extract one to plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Rvision)
#rvision wants us to create a video object
the_vid = Rvision::video(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py/Video_1.avi&amp;quot;)
nframes(the_vid)#shows us the number of frames&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 393&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_frame = readFrame(the_vid,3)
plot(my_frame)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-02-downloading-extracting-video-frames-in-r-python_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;768&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;release(the_vid) #i believe like closing an odbc connection this is good practice&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Video released successfully.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the video in place and know how to extract one frame we can simply loop through the frames and save them as images to train our models:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(pbapply)
                                                                                        
#rvision wants us to create a video object
the_vid = video(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py/Video_1.avi&amp;quot;)
                                                                                        
#then we loop through that video object and extract the frame
pblapply(1:10, function(x){
z = readFrame(the_vid,x)
                                                                                          setwd(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py&amp;quot;)
write.Image(z,paste0(x,&amp;quot;_&amp;quot;,&amp;quot;frame&amp;quot;,&amp;quot;.jpg&amp;quot;))
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## NULL
## 
## [[2]]
## NULL
## 
## [[3]]
## NULL
## 
## [[4]]
## NULL
## 
## [[5]]
## NULL
## 
## [[6]]
## NULL
## 
## [[7]]
## NULL
## 
## [[8]]
## NULL
## 
## [[9]]
## NULL
## 
## [[10]]
## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#for the newbies who perfer the for loops syntax:
                                                                                        
# for (i in 1:10) {
#   the_vid = video(&amp;quot;C:\\Users\\fausto\\Documents\\incubator_img_recog\\plane_classifier\\drone_proj\\videos\\drones\\Video_1.avi&amp;quot;)
#   z = readFrame(the_vid,i)
#   plot(z)
# }
                                                                                        
                                                                                        setwd(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py&amp;quot;)
list.files() &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;1_frame.jpg&amp;quot;         &amp;quot;10_frame.jpg&amp;quot;        &amp;quot;2_frame.jpg&amp;quot;        
##  [4] &amp;quot;3_frame.jpg&amp;quot;         &amp;quot;4_frame.jpg&amp;quot;         &amp;quot;5_frame.jpg&amp;quot;        
##  [7] &amp;quot;6_frame.jpg&amp;quot;         &amp;quot;7_frame.jpg&amp;quot;         &amp;quot;8_frame.jpg&amp;quot;        
## [10] &amp;quot;9_frame.jpg&amp;quot;         &amp;quot;vid_frames_r_py.Rmd&amp;quot; &amp;quot;Video_1.avi&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s about it for downloading video data in R. Insert grayscaling functions into the loop, or other analyses with the EBI or imageR package.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;how-about-python&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How about Python?&lt;/h1&gt;
&lt;p&gt;Since we already have the video downloaded in R I won’t bring it in again python. Instead I will run through how to pull the frames and save them. You can run the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;import cv2
import numpy as np
import os
#set directory
os.chdir(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py&amp;quot;)
#pull in video
cap = cv2.VideoCapture(&amp;quot;Video_1.avi&amp;quot;)
count = 0
#success =T
#loop through video and pull frames for saving
while True:
    
    ret, img = cap.read()
    print &amp;#39;Read a new frame: &amp;#39;, ret
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    os.chdir(&amp;quot;C:/Users/0000/Documents/original_web_posts/video_prc_r_py&amp;quot;)
    cv2.imwrite(&amp;quot;frame%d.jpg&amp;quot; % count, img)     # save frame as JPEG file
    count += 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code will kick and error at the end as it runs out of frames, you can adjust to get rid of that. And there it is! A few lines of code and you can already extract frames from videos. In one of my next posts I’ll go over how to use some of that picture data to train a basic Haarcascade so we can detect specific objects in videos.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
